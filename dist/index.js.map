{"version":3,"sources":["/home/cycloneaddons/pkg/YTMusicAPI/dist/index.js","../src/YTMusicAPI.ts","../src/index.ts"],"names":[],"mappings":"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","file":"/home/cycloneaddons/pkg/YTMusicAPI/dist/index.js","sourcesContent":[null,"import axios, { AxiosInstance } from \"axios\"\nimport { Cookie, CookieJar } from \"tough-cookie\"\nimport { Song } from \"./types\";\n\naxios.defaults.headers.common[\"Accept-Encoding\"] = \"gzip\"\n\nexport default class YTMusicAPI {\n    private cookiejar: CookieJar\n    private config?: Record<string, string>\n    private client: AxiosInstance\n\n    /**\n     * Creates an instance of YTMusicAPI\n     * Make sure to call initialize()\n     */\n    public constructor() {\n        this.cookiejar = new CookieJar()\n        this.config = {}\n        this.client = axios.create({\n            baseURL: \"https://music.youtube.com/\",\n            headers: {\n                \"User-Agent\":\n                    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36\",\n                \"Accept-Language\": \"en-US,en;q=0.5\",\n            },\n            withCredentials: true,\n        })\n\n        this.client.interceptors.request.use(req => {\n            if (req.baseURL) {\n                const cookieString = this.cookiejar.getCookieStringSync(req.baseURL)\n                if (cookieString) {\n                    req.headers[\"cookie\"] = cookieString\n                }\n            }\n\n            return req\n        })\n\n        this.client.interceptors.response.use(res => {\n            if (res.headers && res.config.baseURL) {\n                const cookieStrings = res.headers[\"set-cookie\"] || []\n                for (const cookieString of cookieStrings) {\n                    const cookie = Cookie.parse(cookieString)\n                    if (cookie) {\n                        this.cookiejar.setCookieSync(cookie, res.config.baseURL)\n                    }\n                }\n            }\n\n            return res\n        })\n    }\n\n    /**\n     * Initializes the API\n     */\n    public async initialize(options?: {\n        cookies?: string\n        GL?: string\n        HL?: string\n    }) {\n        const { cookies, GL, HL } = options ?? {}\n\n        if (cookies) {\n            for (const cookieString of cookies.split(\"; \")) {\n                const cookie = Cookie.parse(cookieString)\n                if (cookie) {\n                    this.cookiejar.setCookieSync(cookie, \"https://www.youtube.com/\")\n                }\n            }\n        }\n\n        const html = (await this.client.get(\"/\")).data as string\n        const setConfigs = html.match(/ytcfg\\.set\\(.*\\)/) || []\n\n        const configs = setConfigs\n            .map(c => c.slice(10, -1))\n            .map(s => {\n                try {\n                    return JSON.parse(s)\n                } catch {\n                    return null\n                }\n            })\n            .filter(Boolean)\n\n        this.config = configs.reduce((acc, config) => ({ ...acc, ...config }), this.config || {})\n\n        if (this.config) {\n            if (GL) this.config.GL = GL\n            if (HL) this.config.HL = HL\n        }\n\n        return this\n    }\n\n    /**\n     * Constructs a basic YouTube Music API request with all essential headers\n     * and body parameters needed to make the API work\n     *\n     * @param endpoint Endpoint for the request\n     * @param body Body\n     * @param query Search params\n     * @returns Raw response from YouTube Music API which needs to be parsed\n     */\n    private async constructRequest(\n        endpoint: string,\n        body: Record<string, any> = {},\n        query: Record<string, string> = {},\n    ) {\n        if (!this.config) {\n            throw new Error(\"API not initialized. Make sure to call the initialize() method first\")\n        }\n\n        const headers: Record<string, any> = {\n            ...this.client.defaults.headers,\n            \"x-origin\": this.client.defaults.baseURL,\n            \"X-Goog-Visitor-Id\": this.config.VISITOR_DATA || \"\",\n            \"X-YouTube-Client-Name\": this.config.INNERTUBE_CONTEXT_CLIENT_NAME,\n            \"X-YouTube-Client-Version\": this.config.INNERTUBE_CLIENT_VERSION,\n            \"X-YouTube-Device\": this.config.DEVICE,\n            \"X-YouTube-Page-CL\": this.config.PAGE_CL,\n            \"X-YouTube-Page-Label\": this.config.PAGE_BUILD_LABEL,\n            \"X-YouTube-Utc-Offset\": String(-new Date().getTimezoneOffset()),\n            \"X-YouTube-Time-Zone\": new Intl.DateTimeFormat().resolvedOptions().timeZone,\n        }\n\n        const searchParams = new URLSearchParams({\n            ...query,\n            alt: \"json\",\n            key: this.config.INNERTUBE_API_KEY!,\n        })\n\n        const res = await this.client.post(\n            `youtubei/${this.config.INNERTUBE_API_VERSION}/${endpoint}?${searchParams.toString()}`,\n            {\n                context: {\n                    capabilities: {},\n                    client: {\n                        clientName: this.config.INNERTUBE_CLIENT_NAME,\n                        clientVersion: this.config.INNERTUBE_CLIENT_VERSION,\n                        experimentIds: [],\n                        experimentsToken: \"\",\n                        gl: this.config.GL,\n                        hl: this.config.HL,\n                        locationInfo: {\n                            locationPermissionAuthorizationStatus:\n                                \"LOCATION_PERMISSION_AUTHORIZATION_STATUS_UNSUPPORTED\",\n                        },\n                        musicAppInfo: {\n                            musicActivityMasterSwitch: \"MUSIC_ACTIVITY_MASTER_SWITCH_INDETERMINATE\",\n                            musicLocationMasterSwitch: \"MUSIC_LOCATION_MASTER_SWITCH_INDETERMINATE\",\n                            pwaInstallabilityStatus: \"PWA_INSTALLABILITY_STATUS_UNKNOWN\",\n                        },\n                        utcOffsetMinutes: -new Date().getTimezoneOffset(),\n                    },\n                    request: {\n                        internalExperimentFlags: [\n                            {\n                                key: \"force_music_enable_outertube_tastebuilder_browse\",\n                                value: \"true\",\n                            },\n                            {\n                                key: \"force_music_enable_outertube_playlist_detail_browse\",\n                                value: \"true\",\n                            },\n                            {\n                                key: \"force_music_enable_outertube_search_suggestions\",\n                                value: \"true\",\n                            },\n                        ],\n                        sessionIndex: {},\n                    },\n                    user: {\n                        enableSafetyMode: false,\n                    },\n                },\n                ...body,\n            },\n            {\n                responseType: \"json\",\n                headers,\n            },\n        )\n\n        return \"responseContext\" in res.data ? res.data : res\n    }\n\n    /**\n     * Searches YouTube Music API for songs\n     *\n     * @param query Query string\n     * @returns Array of songs\n     */\n    async searchSongs(query: string): Promise<Song[]> {\n        if (!query || typeof query !== \"string\") throw new Error(\"Invalid query\");\n\n        const searchData = await this.constructRequest(\"search\", {\n            query,\n            params: \"Eg-KAQwIARAAGAAgACgAMABqChAEEAMQCRAFEAo%3D\",\n        });\n        var traverse = (data, ...keys) => {\n            const again = (data2, key, deadEnd = false) => {\n                const res = [];\n                if (data2 instanceof Object && key in data2) {\n                    res.push(data2[key]);\n                    if (deadEnd) return res.length === 1 ? res[0] : res;\n                }\n                if (data2 instanceof Array) {\n                    res.push(...data2.map((v) => again(v, key)).flat());\n                } else if (data2 instanceof Object) {\n                    res.push(\n                        ...Object.keys(data2).map((k) => again(data2[k], key)).flat()\n                    );\n                }\n                return res.length === 1 ? res[0] : res;\n            };\n            let value = data;\n            const lastKey = keys.at(-1);\n            for (const key of keys) {\n                value = again(value, key, lastKey === key);\n            }\n            return value;\n        };\n        var traverseList = (data, ...keys) => {\n            return [traverse(data, ...keys)].flat();\n        };\n\n        const contents = traverseList(searchData, \"musicResponsiveListItemRenderer\");\n\n        if (!contents || !Array.isArray(contents)) throw new Error(\"Invalid response structure\");\n\n        return contents.map((renderer) => {\n            if (!renderer) throw new Error(\"Invalid item structure\");\n\n            const menuRenderer = renderer.menu?.menuRenderer?.items?.[0]?.menuNavigationItemRenderer?.navigationEndpoint?.watchEndpoint;\n            const flexColumns = renderer.flexColumns;\n            const primaryText = flexColumns?.[0]?.musicResponsiveListItemFlexColumnRenderer?.text?.runs?.[0]?.text;\n            const secondaryText = flexColumns?.[1]?.musicResponsiveListItemFlexColumnRenderer?.text;\n            const artists = secondaryText?.accessibility?.accessibilityData?.label.split(\" • \")?.[0];\n            const duration = secondaryText?.runs?.at(-1)?.text;\n            const thumbnail = renderer.thumbnail?.musicThumbnailRenderer?.thumbnail?.thumbnails?.at(-1)?.url;\n\n            return {\n                type: \"SONG\",\n                videoId: menuRenderer?.videoId || \"Unknown\",\n                title: primaryText || \"Unknown\",\n                artists: artists || \"Unknown\",\n                duration: duration || \"Unknown\",\n                thumbnail: thumbnail || \"Unknown\",\n            };\n        });\n    }\n\n\n    /**\n      * Get all possible information of a Up Nexts Song\n      *\n      * @param videoId Video ID\n      * @returns Up Nexts Data\n      */\n    async getUpNexts(videoId: string): Promise<Song[]> {\n        if (!/^[a-zA-Z0-9-_]{11}$/.test(videoId)) throw new Error(\"Invalid videoId\");\n        const data = await this.constructRequest(\"next\", {\n            videoId,\n            playlistId: `RDAMVM${videoId}`,\n            isAudioOnly: true\n        });\n\n        const tabs = data?.contents?.singleColumnMusicWatchNextResultsRenderer?.tabbedRenderer?.watchNextTabbedResultsRenderer?.tabs;\n        if (!tabs || !tabs[0]?.tabRenderer?.content?.musicQueueRenderer?.content?.playlistPanelRenderer?.contents) {\n            throw new Error(\"Invalid response structure\");\n        }\n\n        const contents = tabs[0].tabRenderer.content.musicQueueRenderer.content.playlistPanelRenderer.contents;\n        return contents.slice(1).map(({ playlistPanelVideoRenderer: { videoId: videoId2, title, shortBylineText, lengthText, thumbnail } }) => ({\n            type: \"SONG\",\n            videoId: videoId2,\n            title: title?.runs[0]?.text || \"Unknown\",\n            artists: shortBylineText?.runs[0]?.text || \"Unknown\",\n            duration: lengthText?.runs[0]?.text || \"Unknown\",\n            thumbnail: thumbnail?.thumbnails.at(-1)?.url || \"Unknown\"\n        }));\n    }\n\n}","import YTMusicAPI from \"./YTMusicAPI\"\n\nexport type { Song } from \"./types\"\n\nexport default YTMusicAPI\n"]}