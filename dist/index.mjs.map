{"version":3,"sources":["../src/YTMusicAPI.ts","../src/index.ts"],"sourcesContent":["import axios, { AxiosInstance } from \"axios\"\nimport { Cookie, CookieJar } from \"tough-cookie\"\nimport { Song } from \"./types\";\n\naxios.defaults.headers.common[\"Accept-Encoding\"] = \"gzip\"\n\nexport default class YTMusicAPI {\n    private cookiejar: CookieJar\n    private config?: Record<string, string>\n    private client: AxiosInstance\n\n    /**\n     * Creates an instance of YTMusicAPI\n     * Make sure to call initialize()\n     */\n    public constructor() {\n        this.cookiejar = new CookieJar()\n        this.config = {}\n        this.client = axios.create({\n            baseURL: \"https://music.youtube.com/\",\n            headers: {\n                \"User-Agent\":\n                    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36\",\n                \"Accept-Language\": \"en-US,en;q=0.5\",\n            },\n            withCredentials: true,\n        })\n\n        this.client.interceptors.request.use(req => {\n            if (req.baseURL) {\n                const cookieString = this.cookiejar.getCookieStringSync(req.baseURL)\n                if (cookieString) {\n                    req.headers[\"cookie\"] = cookieString\n                }\n            }\n\n            return req\n        })\n\n        this.client.interceptors.response.use(res => {\n            if (res.headers && res.config.baseURL) {\n                const cookieStrings = res.headers[\"set-cookie\"] || []\n                for (const cookieString of cookieStrings) {\n                    const cookie = Cookie.parse(cookieString)\n                    if (cookie) {\n                        this.cookiejar.setCookieSync(cookie, res.config.baseURL)\n                    }\n                }\n            }\n\n            return res\n        })\n    }\n\n    /**\n     * Initializes the API\n     */\n    public async initialize(options?: {\n        cookies?: string\n        GL?: string\n        HL?: string\n    }) {\n        const { cookies, GL, HL } = options ?? {}\n\n        if (cookies) {\n            for (const cookieString of cookies.split(\"; \")) {\n                const cookie = Cookie.parse(cookieString)\n                if (cookie) {\n                    this.cookiejar.setCookieSync(cookie, \"https://www.youtube.com/\")\n                }\n            }\n        }\n\n        const html = (await this.client.get(\"/\")).data as string\n        const setConfigs = html.match(/ytcfg\\.set\\(.*\\)/) || []\n\n        const configs = setConfigs\n            .map(c => c.slice(10, -1))\n            .map(s => {\n                try {\n                    return JSON.parse(s)\n                } catch {\n                    return null\n                }\n            })\n            .filter(Boolean)\n\n        this.config = configs.reduce((acc, config) => ({ ...acc, ...config }), this.config || {})\n\n        if (this.config) {\n            if (GL) this.config.GL = GL\n            if (HL) this.config.HL = HL\n        }\n\n        return this\n    }\n\n    /**\n     * Constructs a basic YouTube Music API request with all essential headers\n     * and body parameters needed to make the API work\n     *\n     * @param endpoint Endpoint for the request\n     * @param body Body\n     * @param query Search params\n     * @returns Raw response from YouTube Music API which needs to be parsed\n     */\n    private async constructRequest(\n        endpoint: string,\n        body: Record<string, any> = {},\n        query: Record<string, string> = {},\n    ) {\n        if (!this.config) {\n            throw new Error(\"API not initialized. Make sure to call the initialize() method first\")\n        }\n\n        const headers: Record<string, any> = {\n            ...this.client.defaults.headers,\n            \"x-origin\": this.client.defaults.baseURL,\n            \"X-Goog-Visitor-Id\": this.config.VISITOR_DATA || \"\",\n            \"X-YouTube-Client-Name\": this.config.INNERTUBE_CONTEXT_CLIENT_NAME,\n            \"X-YouTube-Client-Version\": this.config.INNERTUBE_CLIENT_VERSION,\n            \"X-YouTube-Device\": this.config.DEVICE,\n            \"X-YouTube-Page-CL\": this.config.PAGE_CL,\n            \"X-YouTube-Page-Label\": this.config.PAGE_BUILD_LABEL,\n            \"X-YouTube-Utc-Offset\": String(-new Date().getTimezoneOffset()),\n            \"X-YouTube-Time-Zone\": new Intl.DateTimeFormat().resolvedOptions().timeZone,\n        }\n\n        const searchParams = new URLSearchParams({\n            ...query,\n            alt: \"json\",\n            key: this.config.INNERTUBE_API_KEY!,\n        })\n\n        const res = await this.client.post(\n            `youtubei/${this.config.INNERTUBE_API_VERSION}/${endpoint}?${searchParams.toString()}`,\n            {\n                context: {\n                    capabilities: {},\n                    client: {\n                        clientName: this.config.INNERTUBE_CLIENT_NAME,\n                        clientVersion: this.config.INNERTUBE_CLIENT_VERSION,\n                        experimentIds: [],\n                        experimentsToken: \"\",\n                        gl: this.config.GL,\n                        hl: this.config.HL,\n                        locationInfo: {\n                            locationPermissionAuthorizationStatus:\n                                \"LOCATION_PERMISSION_AUTHORIZATION_STATUS_UNSUPPORTED\",\n                        },\n                        musicAppInfo: {\n                            musicActivityMasterSwitch: \"MUSIC_ACTIVITY_MASTER_SWITCH_INDETERMINATE\",\n                            musicLocationMasterSwitch: \"MUSIC_LOCATION_MASTER_SWITCH_INDETERMINATE\",\n                            pwaInstallabilityStatus: \"PWA_INSTALLABILITY_STATUS_UNKNOWN\",\n                        },\n                        utcOffsetMinutes: -new Date().getTimezoneOffset(),\n                    },\n                    request: {\n                        internalExperimentFlags: [\n                            {\n                                key: \"force_music_enable_outertube_tastebuilder_browse\",\n                                value: \"true\",\n                            },\n                            {\n                                key: \"force_music_enable_outertube_playlist_detail_browse\",\n                                value: \"true\",\n                            },\n                            {\n                                key: \"force_music_enable_outertube_search_suggestions\",\n                                value: \"true\",\n                            },\n                        ],\n                        sessionIndex: {},\n                    },\n                    user: {\n                        enableSafetyMode: false,\n                    },\n                },\n                ...body,\n            },\n            {\n                responseType: \"json\",\n                headers,\n            },\n        )\n\n        return \"responseContext\" in res.data ? res.data : res\n    }\n\n    /**\n     * Searches YouTube Music API for songs\n     *\n     * @param query Query string\n     * @returns Array of songs\n     */\n    async searchSongs(query: string): Promise<Song[]> {\n        if (!query || typeof query !== \"string\") throw new Error(\"Invalid query\");\n\n        const searchData = await this.constructRequest(\"search\", {\n            query,\n            params: \"Eg-KAQwIARAAGAAgACgAMABqChAEEAMQCRAFEAo%3D\",\n        });\n        var traverse = (data, ...keys) => {\n            const again = (data2, key, deadEnd = false) => {\n                const res = [];\n                if (data2 instanceof Object && key in data2) {\n                    res.push(data2[key]);\n                    if (deadEnd) return res.length === 1 ? res[0] : res;\n                }\n                if (data2 instanceof Array) {\n                    res.push(...data2.map((v) => again(v, key)).flat());\n                } else if (data2 instanceof Object) {\n                    res.push(\n                        ...Object.keys(data2).map((k) => again(data2[k], key)).flat()\n                    );\n                }\n                return res.length === 1 ? res[0] : res;\n            };\n            let value = data;\n            const lastKey = keys.at(-1);\n            for (const key of keys) {\n                value = again(value, key, lastKey === key);\n            }\n            return value;\n        };\n        var traverseList = (data, ...keys) => {\n            return [traverse(data, ...keys)].flat();\n        };\n\n        const contents = traverseList(searchData, \"musicResponsiveListItemRenderer\");\n\n        if (!contents || !Array.isArray(contents)) throw new Error(\"Invalid response structure\");\n\n        return contents.map((renderer) => {\n            if (!renderer) throw new Error(\"Invalid item structure\");\n\n            const menuRenderer = renderer.menu?.menuRenderer?.items?.[0]?.menuNavigationItemRenderer?.navigationEndpoint?.watchEndpoint;\n            const flexColumns = renderer.flexColumns;\n            const primaryText = flexColumns?.[0]?.musicResponsiveListItemFlexColumnRenderer?.text?.runs?.[0]?.text;\n            const secondaryText = flexColumns?.[1]?.musicResponsiveListItemFlexColumnRenderer?.text;\n            const artists = secondaryText?.accessibility?.accessibilityData?.label.split(\" â€¢ \")?.[0];\n            const duration = secondaryText?.runs?.at(-1)?.text;\n            const thumbnail = renderer.thumbnail?.musicThumbnailRenderer?.thumbnail?.thumbnails?.at(-1)?.url;\n\n            return {\n                type: \"SONG\",\n                videoId: menuRenderer?.videoId || \"Unknown\",\n                title: primaryText || \"Unknown\",\n                artists: artists || \"Unknown\",\n                duration: duration || \"Unknown\",\n                thumbnail: thumbnail || \"Unknown\",\n            };\n        });\n    }\n\n\n    /**\n      * Get all possible information of a Up Nexts Song\n      *\n      * @param videoId Video ID\n      * @returns Up Nexts Data\n      */\n    async getUpNexts(videoId: string): Promise<Song[]> {\n        if (!/^[a-zA-Z0-9-_]{11}$/.test(videoId)) throw new Error(\"Invalid videoId\");\n        const data = await this.constructRequest(\"next\", {\n            videoId,\n            playlistId: `RDAMVM${videoId}`,\n            isAudioOnly: true\n        });\n\n        const tabs = data?.contents?.singleColumnMusicWatchNextResultsRenderer?.tabbedRenderer?.watchNextTabbedResultsRenderer?.tabs;\n        if (!tabs || !tabs[0]?.tabRenderer?.content?.musicQueueRenderer?.content?.playlistPanelRenderer?.contents) {\n            throw new Error(\"Invalid response structure\");\n        }\n\n        const contents = tabs[0].tabRenderer.content.musicQueueRenderer.content.playlistPanelRenderer.contents;\n        return contents.slice(1).map(({ playlistPanelVideoRenderer: { videoId: videoId2, title, shortBylineText, lengthText, thumbnail } }) => ({\n            type: \"SONG\",\n            videoId: videoId2,\n            title: title?.runs[0]?.text || \"Unknown\",\n            artists: shortBylineText?.runs[0]?.text || \"Unknown\",\n            duration: lengthText?.runs[0]?.text || \"Unknown\",\n            thumbnail: thumbnail?.thumbnails.at(-1)?.url || \"Unknown\"\n        }));\n    }\n\n}","import YTMusicAPI from \"./YTMusicAPI\"\n\nexport type { Song } from \"./types\"\n\nexport default YTMusicAPI\n"],"mappings":"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","names":[]}