{"version":3,"sources":["../src/YTMusicAPI.ts","../src/index.ts"],"sourcesContent":["import axios, { AxiosInstance } from \"axios\"\r\nimport { Cookie, CookieJar } from \"tough-cookie\"\r\nimport { Song } from \"./types\";\r\n\r\naxios.defaults.headers.common[\"Accept-Encoding\"] = \"gzip\"\r\n\r\nexport default class YTMusicAPI {\r\n    private cookiejar: CookieJar\r\n    private config?: Record<string, string>\r\n    private client: AxiosInstance\r\n\r\n    /**\r\n     * Creates an instance of YTMusicAPI\r\n     * Make sure to call initialize()\r\n     */\r\n    public constructor() {\r\n        this.cookiejar = new CookieJar()\r\n        this.config = {}\r\n        this.client = axios.create({\r\n            baseURL: \"https://music.youtube.com/\",\r\n            headers: {\r\n                \"User-Agent\":\r\n                    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36\",\r\n                \"Accept-Language\": \"en-US,en;q=0.5\",\r\n            },\r\n            withCredentials: true,\r\n        })\r\n\r\n        this.client.interceptors.request.use(req => {\r\n            if (req.baseURL) {\r\n                const cookieString = this.cookiejar.getCookieStringSync(req.baseURL)\r\n                if (cookieString) {\r\n                    req.headers[\"cookie\"] = cookieString\r\n                }\r\n            }\r\n\r\n            return req\r\n        })\r\n\r\n        this.client.interceptors.response.use(res => {\r\n            if (res.headers && res.config.baseURL) {\r\n                const cookieStrings = res.headers[\"set-cookie\"] || []\r\n                for (const cookieString of cookieStrings) {\r\n                    const cookie = Cookie.parse(cookieString)\r\n                    if (cookie) {\r\n                        this.cookiejar.setCookieSync(cookie, res.config.baseURL)\r\n                    }\r\n                }\r\n            }\r\n\r\n            return res\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Initializes the API\r\n     */\r\n    public async initialize(options?: {\r\n        cookies?: string\r\n        GL?: string\r\n        HL?: string\r\n    }) {\r\n        const { cookies, GL, HL } = options ?? {}\r\n\r\n        if (cookies) {\r\n            for (const cookieString of cookies.split(\"; \")) {\r\n                const cookie = Cookie.parse(cookieString)\r\n                if (cookie) {\r\n                    this.cookiejar.setCookieSync(cookie, \"https://www.youtube.com/\")\r\n                }\r\n            }\r\n        }\r\n\r\n        const html = (await this.client.get(\"/\")).data as string\r\n        const setConfigs = html.match(/ytcfg\\.set\\(.*\\)/) || []\r\n\r\n        const configs = setConfigs\r\n            .map(c => c.slice(10, -1))\r\n            .map(s => {\r\n                try {\r\n                    return JSON.parse(s)\r\n                } catch {\r\n                    return null\r\n                }\r\n            })\r\n            .filter(Boolean)\r\n\r\n        this.config = configs.reduce((acc, config) => ({ ...acc, ...config }), this.config || {})\r\n\r\n        if (this.config) {\r\n            if (GL) this.config.GL = GL\r\n            if (HL) this.config.HL = HL\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Constructs a basic YouTube Music API request with all essential headers\r\n     * and body parameters needed to make the API work\r\n     *\r\n     * @param endpoint Endpoint for the request\r\n     * @param body Body\r\n     * @param query Search params\r\n     * @returns Raw response from YouTube Music API which needs to be parsed\r\n     */\r\n    private async constructRequest(\r\n        endpoint: string,\r\n        body: Record<string, any> = {},\r\n        query: Record<string, string> = {},\r\n    ) {\r\n        if (!this.config) {\r\n            throw new Error(\"API not initialized. Make sure to call the initialize() method first\")\r\n        }\r\n\r\n        const headers: Record<string, any> = {\r\n            ...this.client.defaults.headers,\r\n            \"x-origin\": this.client.defaults.baseURL,\r\n            \"X-Goog-Visitor-Id\": this.config.VISITOR_DATA || \"\",\r\n            \"X-YouTube-Client-Name\": this.config.INNERTUBE_CONTEXT_CLIENT_NAME,\r\n            \"X-YouTube-Client-Version\": this.config.INNERTUBE_CLIENT_VERSION,\r\n            \"X-YouTube-Device\": this.config.DEVICE,\r\n            \"X-YouTube-Page-CL\": this.config.PAGE_CL,\r\n            \"X-YouTube-Page-Label\": this.config.PAGE_BUILD_LABEL,\r\n            \"X-YouTube-Utc-Offset\": String(-new Date().getTimezoneOffset()),\r\n            \"X-YouTube-Time-Zone\": new Intl.DateTimeFormat().resolvedOptions().timeZone,\r\n        }\r\n\r\n        const searchParams = new URLSearchParams({\r\n            ...query,\r\n            alt: \"json\",\r\n            key: this.config.INNERTUBE_API_KEY!,\r\n        })\r\n\r\n        const res = await this.client.post(\r\n            `youtubei/${this.config.INNERTUBE_API_VERSION}/${endpoint}?${searchParams.toString()}`,\r\n            {\r\n                context: {\r\n                    capabilities: {},\r\n                    client: {\r\n                        clientName: this.config.INNERTUBE_CLIENT_NAME,\r\n                        clientVersion: this.config.INNERTUBE_CLIENT_VERSION,\r\n                        experimentIds: [],\r\n                        experimentsToken: \"\",\r\n                        gl: this.config.GL,\r\n                        hl: this.config.HL,\r\n                        locationInfo: {\r\n                            locationPermissionAuthorizationStatus:\r\n                                \"LOCATION_PERMISSION_AUTHORIZATION_STATUS_UNSUPPORTED\",\r\n                        },\r\n                        musicAppInfo: {\r\n                            musicActivityMasterSwitch: \"MUSIC_ACTIVITY_MASTER_SWITCH_INDETERMINATE\",\r\n                            musicLocationMasterSwitch: \"MUSIC_LOCATION_MASTER_SWITCH_INDETERMINATE\",\r\n                            pwaInstallabilityStatus: \"PWA_INSTALLABILITY_STATUS_UNKNOWN\",\r\n                        },\r\n                        utcOffsetMinutes: -new Date().getTimezoneOffset(),\r\n                    },\r\n                    request: {\r\n                        internalExperimentFlags: [\r\n                            {\r\n                                key: \"force_music_enable_outertube_tastebuilder_browse\",\r\n                                value: \"true\",\r\n                            },\r\n                            {\r\n                                key: \"force_music_enable_outertube_playlist_detail_browse\",\r\n                                value: \"true\",\r\n                            },\r\n                            {\r\n                                key: \"force_music_enable_outertube_search_suggestions\",\r\n                                value: \"true\",\r\n                            },\r\n                        ],\r\n                        sessionIndex: {},\r\n                    },\r\n                    user: {\r\n                        enableSafetyMode: false,\r\n                    },\r\n                },\r\n                ...body,\r\n            },\r\n            {\r\n                responseType: \"json\",\r\n                headers,\r\n            },\r\n        )\r\n\r\n        return \"responseContext\" in res.data ? res.data : res\r\n    }\r\n\r\n    /**\r\n     * Searches YouTube Music API for songs\r\n     *\r\n     * @param query Query string\r\n     * @returns Array of songs\r\n     */\r\n    async searchSongs(query: string): Promise<Song[]> {\r\n        if (!query || typeof query !== \"string\") throw new Error(\"Invalid query\");\r\n\r\n        const searchData = await this.constructRequest(\"search\", {\r\n            query,\r\n            params: \"Eg-KAQwIARAAGAAgACgAMABqChAEEAMQCRAFEAo%3D\",\r\n        });\r\n\r\n        const contents = searchData?.contents?.tabbedSearchResultsRenderer?.tabs?.[0]?.tabRenderer?.content?.sectionListRenderer?.contents?.[0]?.musicShelfRenderer?.contents;\r\n\r\n        if (!contents || !Array.isArray(contents)) throw new Error(\"Invalid response structure\");\r\n\r\n        return contents.map((song) => {\r\n            const renderer = song.musicResponsiveListItemRenderer;\r\n            if (!renderer) throw new Error(\"Invalid item structure\");\r\n\r\n            const menuRenderer = renderer.menu?.menuRenderer?.items?.[0]?.menuNavigationItemRenderer?.navigationEndpoint?.watchEndpoint;\r\n            const flexColumns = renderer.flexColumns;\r\n            const primaryText = flexColumns?.[0]?.musicResponsiveListItemFlexColumnRenderer?.text?.runs?.[0]?.text;\r\n            const secondaryText = flexColumns?.[1]?.musicResponsiveListItemFlexColumnRenderer?.text;\r\n            const artists = secondaryText?.accessibility?.accessibilityData?.label.split(\" â€¢ \")?.[0];\r\n            const duration = secondaryText?.runs?.at(-1)?.text;\r\n            const thumbnail = renderer.thumbnail?.musicThumbnailRenderer?.thumbnail?.thumbnails?.at(-1)?.url;\r\n\r\n            return {\r\n                type: \"SONG\",\r\n                videoId: menuRenderer?.videoId || \"Unknown\",\r\n                title: primaryText || \"Unknown\",\r\n                artists: artists || \"Unknown\",\r\n                duration: duration || \"Unknown\",\r\n                thumbnail: thumbnail || \"Unknown\",\r\n            };\r\n        });\r\n    }\r\n\r\n\r\n /**\r\n   * Get all possible information of a Up Nexts Song\r\n   *\r\n   * @param videoId Video ID\r\n   * @returns Up Nexts Data\r\n   */\r\n async getUpNexts(videoId: string): Promise<Song[]> {\r\n    if (!/^[a-zA-Z0-9-_]{11}$/.test(videoId)) throw new Error(\"Invalid videoId\");\r\n    const data = await this.constructRequest(\"next\", {\r\n      videoId,\r\n      playlistId: `RDAMVM${videoId}`,\r\n      isAudioOnly: true\r\n    });\r\n\r\n    const tabs = data?.contents?.singleColumnMusicWatchNextResultsRenderer?.tabbedRenderer?.watchNextTabbedResultsRenderer?.tabs;\r\n    if (!tabs || !tabs[0]?.tabRenderer?.content?.musicQueueRenderer?.content?.playlistPanelRenderer?.contents) {\r\n        throw new Error(\"Invalid response structure\");\r\n    }\r\n\r\n    const contents = tabs[0].tabRenderer.content.musicQueueRenderer.content.playlistPanelRenderer.contents;\r\n    return contents.slice(1).map(({ playlistPanelVideoRenderer: { videoId: videoId2, title, shortBylineText, lengthText, thumbnail } }) => ({\r\n        type: \"SONG\",\r\n        videoId: videoId2,\r\n        title: title?.runs[0]?.text || \"Unknown\",\r\n        artists: shortBylineText?.runs[0]?.text || \"Unknown\",\r\n        duration: lengthText?.runs[0]?.text || \"Unknown\",\r\n        thumbnail: thumbnail?.thumbnails.at(-1)?.url || \"Unknown\"\r\n    }));\r\n}\r\n\r\n}","import YTMusicAPI from \"./YTMusicAPI\"\r\n\r\nexport type { Song } from \"./types\"\r\n\r\nexport default YTMusicAPI\r\n"],"mappings":"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","names":[]}